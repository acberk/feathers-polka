const makeDebug = require('debug');
const wrappers = require('./wrappers');

const debug = makeDebug('@feathersjs/polka/rest');

function formatter (req, res, next) {
  if (res.data === undefined) {
    return next();
  }

  res.writeHead(200, {'Content-Type': 'application/json'})
  res.end(JSON.stringify(res.data))

  // res.format({
  //   'application/json': function () {
  //     res.json(res.data);
  //   }
  // });


  // res.writeHead

}

function rest (handler = formatter) {
  return function () {
    const app = this;

    // if (typeof app.route !== 'function') {
    //   throw new Error('@feathersjs/polka/rest needs an Polka compatible app. Feathers apps have to wrapped with feathers-polka first.');
    // }

    if (!app.version || app.version < '3.0.0') {
      throw new Error(`@feathersjs/polka/rest requires an instance of a Feathers application version 3.x or later (got ${app.version})`);
    }

    app.rest = wrappers;

    app.oldUse(function (req, res, next) {
      req.feathers = { provider: 'rest' };
      next();
    });

    // Register the REST provider
    app.providers.push(function (service, path, options) {
      const uri = `/${path}`;
      const baseRoute = uri;//app.route(uri);
      const idRoute = `${uri}/:__feathersId`; //app.route(`${uri}/:__feathersId`);

      let { middleware } = options;
      let { before, after } = middleware;

      if (typeof handler === 'function') {
        after = after.concat(handler);
      }

      debug(`Adding REST provider for service \`${path}\` at base route \`${uri}\``);

      // GET / -> service.find(params)
      app.get(baseRoute, app.rest.find(service), ...after);
      // POST / -> service.create(data, params)
      app.post(baseRoute, app.rest.create(service), ...after);
      // PATCH / -> service.patch(null, data, params)
      app.patch(baseRoute, app.rest.patch(service), ...after);
      // PUT / -> service.update(null, data, params)
      app.put(baseRoute, app.rest.update(service), ...after);
      // DELETE / -> service.remove(null, params)
      app.delete(baseRoute, app.rest.remove(service), ...after);


      // GET /:id -> service.get(id, params)
      app.get(idRoute, app.rest.get(service), ...after);
      // PATCH /:id -> service.patch(id, data, params)
      app.patch(idRoute, app.rest.patch(service), ...after);
      // PUT /:id -> service.update(id, data, params)
      app.put(idRoute, app.rest.update(service), ...after);
      // DELETE /:id -> service.remove(id, params)
      app.delete(idRoute, app.rest.remove(service), ...after);
      
    });
  };
}

rest.formatter = formatter;

module.exports = rest;
